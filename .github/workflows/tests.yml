name: run tests
on:
  push:
  schedule:
    - cron: "0 1 * * *"

jobs:
#  lint:

  setup_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: install python
        uses: actions/setup-python@v5
        with:
          python-version: '^3.12'

#        poetry config virtualenvs.in-project true  # сохраняет поетри в папку .venv внутри проекта. Удобно затем удалять

      - name: install pipx
        run: |
          sudo apt update
          sudo apt install pipx
          pipx ensurepath

      - name: install poetry
        run: pipx install poetry==1.8.4

      - name: install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: run playwright
        run: poetry run playwright install --with-deps

      - name: run tests
        run: poetry run pytest

# https://allurereport.org/docs/integrations-github/#_2-enable-write-access-for-github-actions
#  allure_report:
#    runs-on: ubuntu-latest
#    needs: [ setup_and_test ]
#    steps:
#      - uses: actions/checkout@v3
#      - name: Load test report history
#        uses: actions/checkout@v3
#        if: always()
#        continue-on-error: true
#        with:
#          ref: gh-pages
#          path: gh-pages
#
#      - name: Build test report
#        uses: simple-elf/allure-report-action@v1.7
#        if: always()
#        with:
#          gh_pages: gh-pages
#          allure_history: allure-history
#          allure_results: build/allure-results
#
#      - name: Publish test report
#        uses: peaceiris/actions-gh-pages@v3
#        if: always()
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          publish_branch: gh-pages
#          publish_dir: allure-history



#  allure-report:
#    needs: [tests]
#      steps:
#
#      -


  generate_and_deploy_report:
    name: II. Generate & Deploy Allure report
    runs-on: ubuntu-latest
    if: always()
    needs: [ tests ]

    steps:
      - name: 1. Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: 2. Download Artifacts
        uses: actions/download-artifact@v3
        id: download
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: allure-results

      - name: 3. Generate allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history
          ref: gh-pages
          path: gh-pages
          keep_reports: 20

      - name: 4. Deploy allure_report to Github Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          personal_token: ${{ secrets.GITHUB_TOKEN }}
#          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          publish_dir: ./allure-history
          commit_message: ${{ github.event.head_commit.message }}